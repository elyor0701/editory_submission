// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: submission_service.proto

package submission_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CheckerService_CreateArticleChecker_FullMethodName  = "/submission_service.CheckerService/CreateArticleChecker"
	CheckerService_GetArticleChecker_FullMethodName     = "/submission_service.CheckerService/GetArticleChecker"
	CheckerService_GetArticleCheckerList_FullMethodName = "/submission_service.CheckerService/GetArticleCheckerList"
	CheckerService_UpdateArticleChecker_FullMethodName  = "/submission_service.CheckerService/UpdateArticleChecker"
	CheckerService_DeleteArticleChecker_FullMethodName  = "/submission_service.CheckerService/DeleteArticleChecker"
)

// CheckerServiceClient is the client API for CheckerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckerServiceClient interface {
	CreateArticleChecker(ctx context.Context, in *CreateArticleCheckerReq, opts ...grpc.CallOption) (*CreateArticleCheckerRes, error)
	GetArticleChecker(ctx context.Context, in *GetArticleCheckerReq, opts ...grpc.CallOption) (*GetArticleCheckerRes, error)
	GetArticleCheckerList(ctx context.Context, in *GetArticleCheckerListReq, opts ...grpc.CallOption) (*GetArticleCheckerListRes, error)
	UpdateArticleChecker(ctx context.Context, in *UpdateArticleCheckerReq, opts ...grpc.CallOption) (*UpdateArticleCheckerRes, error)
	DeleteArticleChecker(ctx context.Context, in *DeleteArticleCheckerReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type checkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckerServiceClient(cc grpc.ClientConnInterface) CheckerServiceClient {
	return &checkerServiceClient{cc}
}

func (c *checkerServiceClient) CreateArticleChecker(ctx context.Context, in *CreateArticleCheckerReq, opts ...grpc.CallOption) (*CreateArticleCheckerRes, error) {
	out := new(CreateArticleCheckerRes)
	err := c.cc.Invoke(ctx, CheckerService_CreateArticleChecker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerServiceClient) GetArticleChecker(ctx context.Context, in *GetArticleCheckerReq, opts ...grpc.CallOption) (*GetArticleCheckerRes, error) {
	out := new(GetArticleCheckerRes)
	err := c.cc.Invoke(ctx, CheckerService_GetArticleChecker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerServiceClient) GetArticleCheckerList(ctx context.Context, in *GetArticleCheckerListReq, opts ...grpc.CallOption) (*GetArticleCheckerListRes, error) {
	out := new(GetArticleCheckerListRes)
	err := c.cc.Invoke(ctx, CheckerService_GetArticleCheckerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerServiceClient) UpdateArticleChecker(ctx context.Context, in *UpdateArticleCheckerReq, opts ...grpc.CallOption) (*UpdateArticleCheckerRes, error) {
	out := new(UpdateArticleCheckerRes)
	err := c.cc.Invoke(ctx, CheckerService_UpdateArticleChecker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerServiceClient) DeleteArticleChecker(ctx context.Context, in *DeleteArticleCheckerReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CheckerService_DeleteArticleChecker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckerServiceServer is the server API for CheckerService service.
// All implementations must embed UnimplementedCheckerServiceServer
// for forward compatibility
type CheckerServiceServer interface {
	CreateArticleChecker(context.Context, *CreateArticleCheckerReq) (*CreateArticleCheckerRes, error)
	GetArticleChecker(context.Context, *GetArticleCheckerReq) (*GetArticleCheckerRes, error)
	GetArticleCheckerList(context.Context, *GetArticleCheckerListReq) (*GetArticleCheckerListRes, error)
	UpdateArticleChecker(context.Context, *UpdateArticleCheckerReq) (*UpdateArticleCheckerRes, error)
	DeleteArticleChecker(context.Context, *DeleteArticleCheckerReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedCheckerServiceServer()
}

// UnimplementedCheckerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCheckerServiceServer struct {
}

func (UnimplementedCheckerServiceServer) CreateArticleChecker(context.Context, *CreateArticleCheckerReq) (*CreateArticleCheckerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticleChecker not implemented")
}
func (UnimplementedCheckerServiceServer) GetArticleChecker(context.Context, *GetArticleCheckerReq) (*GetArticleCheckerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleChecker not implemented")
}
func (UnimplementedCheckerServiceServer) GetArticleCheckerList(context.Context, *GetArticleCheckerListReq) (*GetArticleCheckerListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleCheckerList not implemented")
}
func (UnimplementedCheckerServiceServer) UpdateArticleChecker(context.Context, *UpdateArticleCheckerReq) (*UpdateArticleCheckerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticleChecker not implemented")
}
func (UnimplementedCheckerServiceServer) DeleteArticleChecker(context.Context, *DeleteArticleCheckerReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticleChecker not implemented")
}
func (UnimplementedCheckerServiceServer) mustEmbedUnimplementedCheckerServiceServer() {}

// UnsafeCheckerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckerServiceServer will
// result in compilation errors.
type UnsafeCheckerServiceServer interface {
	mustEmbedUnimplementedCheckerServiceServer()
}

func RegisterCheckerServiceServer(s grpc.ServiceRegistrar, srv CheckerServiceServer) {
	s.RegisterService(&CheckerService_ServiceDesc, srv)
}

func _CheckerService_CreateArticleChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleCheckerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServiceServer).CreateArticleChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerService_CreateArticleChecker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServiceServer).CreateArticleChecker(ctx, req.(*CreateArticleCheckerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerService_GetArticleChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleCheckerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServiceServer).GetArticleChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerService_GetArticleChecker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServiceServer).GetArticleChecker(ctx, req.(*GetArticleCheckerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerService_GetArticleCheckerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleCheckerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServiceServer).GetArticleCheckerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerService_GetArticleCheckerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServiceServer).GetArticleCheckerList(ctx, req.(*GetArticleCheckerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerService_UpdateArticleChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleCheckerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServiceServer).UpdateArticleChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerService_UpdateArticleChecker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServiceServer).UpdateArticleChecker(ctx, req.(*UpdateArticleCheckerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerService_DeleteArticleChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleCheckerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServiceServer).DeleteArticleChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerService_DeleteArticleChecker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServiceServer).DeleteArticleChecker(ctx, req.(*DeleteArticleCheckerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckerService_ServiceDesc is the grpc.ServiceDesc for CheckerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "submission_service.CheckerService",
	HandlerType: (*CheckerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticleChecker",
			Handler:    _CheckerService_CreateArticleChecker_Handler,
		},
		{
			MethodName: "GetArticleChecker",
			Handler:    _CheckerService_GetArticleChecker_Handler,
		},
		{
			MethodName: "GetArticleCheckerList",
			Handler:    _CheckerService_GetArticleCheckerList_Handler,
		},
		{
			MethodName: "UpdateArticleChecker",
			Handler:    _CheckerService_UpdateArticleChecker_Handler,
		},
		{
			MethodName: "DeleteArticleChecker",
			Handler:    _CheckerService_DeleteArticleChecker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submission_service.proto",
}
