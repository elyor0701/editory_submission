// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.17.3
// source: article_service.proto

package submission_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JournalId    string `protobuf:"bytes,1,opt,name=journal_id,json=journalId,proto3" json:"journal_id,omitempty"`
	Type         string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Title        string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	AuthorId     string `protobuf:"bytes,4,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Description  string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Status       string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Step         string `protobuf:"bytes,7,opt,name=step,proto3" json:"step,omitempty"`
	GroupId      string `protobuf:"bytes,8,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Conflict     bool   `protobuf:"varint,9,opt,name=conflict,proto3" json:"conflict,omitempty"`
	Availability string `protobuf:"bytes,10,opt,name=availability,proto3" json:"availability,omitempty"`
	Funding      string `protobuf:"bytes,11,opt,name=funding,proto3" json:"funding,omitempty"`
	DraftStep    string `protobuf:"bytes,12,opt,name=draft_step,json=draftStep,proto3" json:"draft_step,omitempty"`
}

func (x *CreateArticleReq) Reset() {
	*x = CreateArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArticleReq) ProtoMessage() {}

func (x *CreateArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArticleReq.ProtoReflect.Descriptor instead.
func (*CreateArticleReq) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateArticleReq) GetJournalId() string {
	if x != nil {
		return x.JournalId
	}
	return ""
}

func (x *CreateArticleReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateArticleReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateArticleReq) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *CreateArticleReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateArticleReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateArticleReq) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *CreateArticleReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateArticleReq) GetConflict() bool {
	if x != nil {
		return x.Conflict
	}
	return false
}

func (x *CreateArticleReq) GetAvailability() string {
	if x != nil {
		return x.Availability
	}
	return ""
}

func (x *CreateArticleReq) GetFunding() string {
	if x != nil {
		return x.Funding
	}
	return ""
}

func (x *CreateArticleReq) GetDraftStep() string {
	if x != nil {
		return x.DraftStep
	}
	return ""
}

type CreateArticleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JournalId      string   `protobuf:"bytes,2,opt,name=journal_id,json=journalId,proto3" json:"journal_id,omitempty"`
	Type           string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Title          string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	AuthorId       string   `protobuf:"bytes,5,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Description    string   `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Status         string   `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Step           string   `protobuf:"bytes,8,opt,name=step,proto3" json:"step,omitempty"`
	EditorStatus   string   `protobuf:"bytes,9,opt,name=editor_status,json=editorStatus,proto3" json:"editor_status,omitempty"`
	ReviewerStatus string   `protobuf:"bytes,10,opt,name=reviewer_status,json=reviewerStatus,proto3" json:"reviewer_status,omitempty"`
	GroupId        string   `protobuf:"bytes,11,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Conflict       bool     `protobuf:"varint,12,opt,name=conflict,proto3" json:"conflict,omitempty"`
	Availability   string   `protobuf:"bytes,113,opt,name=availability,proto3" json:"availability,omitempty"`
	Funding        string   `protobuf:"bytes,14,opt,name=funding,proto3" json:"funding,omitempty"`
	DraftStep      string   `protobuf:"bytes,15,opt,name=draft_step,json=draftStep,proto3" json:"draft_step,omitempty"`
	CreatedAt      string   `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      string   `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	JournalIdData  *Journal `protobuf:"bytes,18,opt,name=journal_id_data,json=journalIdData,proto3" json:"journal_id_data,omitempty"`
	Files          []*File  `protobuf:"bytes,19,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *CreateArticleRes) Reset() {
	*x = CreateArticleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArticleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArticleRes) ProtoMessage() {}

func (x *CreateArticleRes) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArticleRes.ProtoReflect.Descriptor instead.
func (*CreateArticleRes) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateArticleRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateArticleRes) GetJournalId() string {
	if x != nil {
		return x.JournalId
	}
	return ""
}

func (x *CreateArticleRes) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateArticleRes) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateArticleRes) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *CreateArticleRes) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateArticleRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateArticleRes) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *CreateArticleRes) GetEditorStatus() string {
	if x != nil {
		return x.EditorStatus
	}
	return ""
}

func (x *CreateArticleRes) GetReviewerStatus() string {
	if x != nil {
		return x.ReviewerStatus
	}
	return ""
}

func (x *CreateArticleRes) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateArticleRes) GetConflict() bool {
	if x != nil {
		return x.Conflict
	}
	return false
}

func (x *CreateArticleRes) GetAvailability() string {
	if x != nil {
		return x.Availability
	}
	return ""
}

func (x *CreateArticleRes) GetFunding() string {
	if x != nil {
		return x.Funding
	}
	return ""
}

func (x *CreateArticleRes) GetDraftStep() string {
	if x != nil {
		return x.DraftStep
	}
	return ""
}

func (x *CreateArticleRes) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CreateArticleRes) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *CreateArticleRes) GetJournalIdData() *Journal {
	if x != nil {
		return x.JournalIdData
	}
	return nil
}

func (x *CreateArticleRes) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

type GetArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetArticleReq) Reset() {
	*x = GetArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticleReq) ProtoMessage() {}

func (x *GetArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticleReq.ProtoReflect.Descriptor instead.
func (*GetArticleReq) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetArticleReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetArticleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JournalId      string      `protobuf:"bytes,2,opt,name=journal_id,json=journalId,proto3" json:"journal_id,omitempty"`
	Type           string      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Title          string      `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	AuthorId       string      `protobuf:"bytes,5,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Description    string      `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Status         string      `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Step           string      `protobuf:"bytes,8,opt,name=step,proto3" json:"step,omitempty"`
	EditorStatus   string      `protobuf:"bytes,9,opt,name=editor_status,json=editorStatus,proto3" json:"editor_status,omitempty"`
	ReviewerStatus string      `protobuf:"bytes,10,opt,name=reviewer_status,json=reviewerStatus,proto3" json:"reviewer_status,omitempty"`
	GroupId        string      `protobuf:"bytes,11,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Conflict       bool        `protobuf:"varint,12,opt,name=conflict,proto3" json:"conflict,omitempty"`
	Availability   string      `protobuf:"bytes,113,opt,name=availability,proto3" json:"availability,omitempty"`
	Funding        string      `protobuf:"bytes,14,opt,name=funding,proto3" json:"funding,omitempty"`
	DraftStep      string      `protobuf:"bytes,15,opt,name=draft_step,json=draftStep,proto3" json:"draft_step,omitempty"`
	CreatedAt      string      `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      string      `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	JournalIdData  *Journal    `protobuf:"bytes,18,opt,name=journal_id_data,json=journalIdData,proto3" json:"journal_id_data,omitempty"`
	Files          []*File     `protobuf:"bytes,19,rep,name=files,proto3" json:"files,omitempty"`
	Coauthors      []*CoAuthor `protobuf:"bytes,20,rep,name=coauthors,proto3" json:"coauthors,omitempty"`
	AuthorIdData   *User       `protobuf:"bytes,21,opt,name=author_id_data,json=authorIdData,proto3" json:"author_id_data,omitempty"`
}

func (x *GetArticleRes) Reset() {
	*x = GetArticleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArticleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticleRes) ProtoMessage() {}

func (x *GetArticleRes) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticleRes.ProtoReflect.Descriptor instead.
func (*GetArticleRes) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetArticleRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetArticleRes) GetJournalId() string {
	if x != nil {
		return x.JournalId
	}
	return ""
}

func (x *GetArticleRes) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetArticleRes) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetArticleRes) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *GetArticleRes) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetArticleRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetArticleRes) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *GetArticleRes) GetEditorStatus() string {
	if x != nil {
		return x.EditorStatus
	}
	return ""
}

func (x *GetArticleRes) GetReviewerStatus() string {
	if x != nil {
		return x.ReviewerStatus
	}
	return ""
}

func (x *GetArticleRes) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetArticleRes) GetConflict() bool {
	if x != nil {
		return x.Conflict
	}
	return false
}

func (x *GetArticleRes) GetAvailability() string {
	if x != nil {
		return x.Availability
	}
	return ""
}

func (x *GetArticleRes) GetFunding() string {
	if x != nil {
		return x.Funding
	}
	return ""
}

func (x *GetArticleRes) GetDraftStep() string {
	if x != nil {
		return x.DraftStep
	}
	return ""
}

func (x *GetArticleRes) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetArticleRes) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *GetArticleRes) GetJournalIdData() *Journal {
	if x != nil {
		return x.JournalIdData
	}
	return nil
}

func (x *GetArticleRes) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *GetArticleRes) GetCoauthors() []*CoAuthor {
	if x != nil {
		return x.Coauthors
	}
	return nil
}

func (x *GetArticleRes) GetAuthorIdData() *User {
	if x != nil {
		return x.AuthorIdData
	}
	return nil
}

type GetArticleListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Search    string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	JournalId string `protobuf:"bytes,4,opt,name=journal_id,json=journalId,proto3" json:"journal_id,omitempty"`
	AuthorId  string `protobuf:"bytes,5,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Status    string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	GroupId   string `protobuf:"bytes,7,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *GetArticleListReq) Reset() {
	*x = GetArticleListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArticleListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticleListReq) ProtoMessage() {}

func (x *GetArticleListReq) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticleListReq.ProtoReflect.Descriptor instead.
func (*GetArticleListReq) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetArticleListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetArticleListReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetArticleListReq) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetArticleListReq) GetJournalId() string {
	if x != nil {
		return x.JournalId
	}
	return ""
}

func (x *GetArticleListReq) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *GetArticleListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetArticleListReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type GetArticleListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Articles []*Article `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
	Count    int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetArticleListRes) Reset() {
	*x = GetArticleListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArticleListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticleListRes) ProtoMessage() {}

func (x *GetArticleListRes) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticleListRes.ProtoReflect.Descriptor instead.
func (*GetArticleListRes) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetArticleListRes) GetArticles() []*Article {
	if x != nil {
		return x.Articles
	}
	return nil
}

func (x *GetArticleListRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UpdateArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JournalId      string `protobuf:"bytes,2,opt,name=journal_id,json=journalId,proto3" json:"journal_id,omitempty"`
	Type           string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Title          string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	AuthorId       string `protobuf:"bytes,5,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Description    string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Status         string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Step           string `protobuf:"bytes,8,opt,name=step,proto3" json:"step,omitempty"`
	EditorStatus   string `protobuf:"bytes,9,opt,name=editor_status,json=editorStatus,proto3" json:"editor_status,omitempty"`
	ReviewerStatus string `protobuf:"bytes,10,opt,name=reviewer_status,json=reviewerStatus,proto3" json:"reviewer_status,omitempty"`
	GroupId        string `protobuf:"bytes,11,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Conflict       bool   `protobuf:"varint,12,opt,name=conflict,proto3" json:"conflict,omitempty"`
	Availability   string `protobuf:"bytes,113,opt,name=availability,proto3" json:"availability,omitempty"`
	Funding        string `protobuf:"bytes,14,opt,name=funding,proto3" json:"funding,omitempty"`
	DraftStep      string `protobuf:"bytes,15,opt,name=draft_step,json=draftStep,proto3" json:"draft_step,omitempty"`
}

func (x *UpdateArticleReq) Reset() {
	*x = UpdateArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArticleReq) ProtoMessage() {}

func (x *UpdateArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArticleReq.ProtoReflect.Descriptor instead.
func (*UpdateArticleReq) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateArticleReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateArticleReq) GetJournalId() string {
	if x != nil {
		return x.JournalId
	}
	return ""
}

func (x *UpdateArticleReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateArticleReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateArticleReq) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *UpdateArticleReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateArticleReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateArticleReq) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *UpdateArticleReq) GetEditorStatus() string {
	if x != nil {
		return x.EditorStatus
	}
	return ""
}

func (x *UpdateArticleReq) GetReviewerStatus() string {
	if x != nil {
		return x.ReviewerStatus
	}
	return ""
}

func (x *UpdateArticleReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UpdateArticleReq) GetConflict() bool {
	if x != nil {
		return x.Conflict
	}
	return false
}

func (x *UpdateArticleReq) GetAvailability() string {
	if x != nil {
		return x.Availability
	}
	return ""
}

func (x *UpdateArticleReq) GetFunding() string {
	if x != nil {
		return x.Funding
	}
	return ""
}

func (x *UpdateArticleReq) GetDraftStep() string {
	if x != nil {
		return x.DraftStep
	}
	return ""
}

type UpdateArticleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JournalId      string   `protobuf:"bytes,2,opt,name=journal_id,json=journalId,proto3" json:"journal_id,omitempty"`
	Type           string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Title          string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	AuthorId       string   `protobuf:"bytes,5,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Description    string   `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Status         string   `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Step           string   `protobuf:"bytes,8,opt,name=step,proto3" json:"step,omitempty"`
	EditorStatus   string   `protobuf:"bytes,9,opt,name=editor_status,json=editorStatus,proto3" json:"editor_status,omitempty"`
	ReviewerStatus string   `protobuf:"bytes,10,opt,name=reviewer_status,json=reviewerStatus,proto3" json:"reviewer_status,omitempty"`
	GroupId        string   `protobuf:"bytes,11,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Conflict       bool     `protobuf:"varint,12,opt,name=conflict,proto3" json:"conflict,omitempty"`
	Availability   string   `protobuf:"bytes,113,opt,name=availability,proto3" json:"availability,omitempty"`
	Funding        string   `protobuf:"bytes,14,opt,name=funding,proto3" json:"funding,omitempty"`
	DraftStep      string   `protobuf:"bytes,15,opt,name=draft_step,json=draftStep,proto3" json:"draft_step,omitempty"`
	CreatedAt      string   `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      string   `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	JournalIdData  *Journal `protobuf:"bytes,18,opt,name=journal_id_data,json=journalIdData,proto3" json:"journal_id_data,omitempty"`
	Files          []*File  `protobuf:"bytes,19,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *UpdateArticleRes) Reset() {
	*x = UpdateArticleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateArticleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArticleRes) ProtoMessage() {}

func (x *UpdateArticleRes) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArticleRes.ProtoReflect.Descriptor instead.
func (*UpdateArticleRes) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateArticleRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateArticleRes) GetJournalId() string {
	if x != nil {
		return x.JournalId
	}
	return ""
}

func (x *UpdateArticleRes) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateArticleRes) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateArticleRes) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *UpdateArticleRes) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateArticleRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateArticleRes) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *UpdateArticleRes) GetEditorStatus() string {
	if x != nil {
		return x.EditorStatus
	}
	return ""
}

func (x *UpdateArticleRes) GetReviewerStatus() string {
	if x != nil {
		return x.ReviewerStatus
	}
	return ""
}

func (x *UpdateArticleRes) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UpdateArticleRes) GetConflict() bool {
	if x != nil {
		return x.Conflict
	}
	return false
}

func (x *UpdateArticleRes) GetAvailability() string {
	if x != nil {
		return x.Availability
	}
	return ""
}

func (x *UpdateArticleRes) GetFunding() string {
	if x != nil {
		return x.Funding
	}
	return ""
}

func (x *UpdateArticleRes) GetDraftStep() string {
	if x != nil {
		return x.DraftStep
	}
	return ""
}

func (x *UpdateArticleRes) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UpdateArticleRes) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *UpdateArticleRes) GetJournalIdData() *Journal {
	if x != nil {
		return x.JournalIdData
	}
	return nil
}

func (x *UpdateArticleRes) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

type DeleteArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteArticleReq) Reset() {
	*x = DeleteArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArticleReq) ProtoMessage() {}

func (x *DeleteArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArticleReq.ProtoReflect.Descriptor instead.
func (*DeleteArticleReq) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteArticleReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AddFilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ArticleId string `protobuf:"bytes,3,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *AddFilesReq) Reset() {
	*x = AddFilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFilesReq) ProtoMessage() {}

func (x *AddFilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFilesReq.ProtoReflect.Descriptor instead.
func (*AddFilesReq) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{9}
}

func (x *AddFilesReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddFilesReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddFilesReq) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

type AddFilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ArticleId string `protobuf:"bytes,4,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *AddFilesRes) Reset() {
	*x = AddFilesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFilesRes) ProtoMessage() {}

func (x *AddFilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFilesRes.ProtoReflect.Descriptor instead.
func (*AddFilesRes) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{10}
}

func (x *AddFilesRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddFilesRes) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddFilesRes) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddFilesRes) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

type GetFilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ArticleId string `protobuf:"bytes,5,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *GetFilesReq) Reset() {
	*x = GetFilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesReq) ProtoMessage() {}

func (x *GetFilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesReq.ProtoReflect.Descriptor instead.
func (*GetFilesReq) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetFilesReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetFilesReq) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

type GetFilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Count int32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetFilesRes) Reset() {
	*x = GetFilesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesRes) ProtoMessage() {}

func (x *GetFilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesRes.ProtoReflect.Descriptor instead.
func (*GetFilesRes) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetFilesRes) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *GetFilesRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeleteFilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids string `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteFilesReq) Reset() {
	*x = DeleteFilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFilesReq) ProtoMessage() {}

func (x *DeleteFilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFilesReq.ProtoReflect.Descriptor instead.
func (*DeleteFilesReq) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteFilesReq) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

type AddCoAuthorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId string `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AddCoAuthorReq) Reset() {
	*x = AddCoAuthorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCoAuthorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCoAuthorReq) ProtoMessage() {}

func (x *AddCoAuthorReq) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCoAuthorReq.ProtoReflect.Descriptor instead.
func (*AddCoAuthorReq) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{14}
}

func (x *AddCoAuthorReq) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *AddCoAuthorReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AddCoAuthorRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ArticleId string `protobuf:"bytes,2,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	UserId    string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AddCoAuthorRes) Reset() {
	*x = AddCoAuthorRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCoAuthorRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCoAuthorRes) ProtoMessage() {}

func (x *AddCoAuthorRes) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCoAuthorRes.ProtoReflect.Descriptor instead.
func (*AddCoAuthorRes) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{15}
}

func (x *AddCoAuthorRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddCoAuthorRes) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *AddCoAuthorRes) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetCoAuthorsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DraftId string `protobuf:"bytes,1,opt,name=draft_id,json=draftId,proto3" json:"draft_id,omitempty"`
}

func (x *GetCoAuthorsReq) Reset() {
	*x = GetCoAuthorsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoAuthorsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoAuthorsReq) ProtoMessage() {}

func (x *GetCoAuthorsReq) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoAuthorsReq.ProtoReflect.Descriptor instead.
func (*GetCoAuthorsReq) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetCoAuthorsReq) GetDraftId() string {
	if x != nil {
		return x.DraftId
	}
	return ""
}

type GetCoAuthorsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coauthors []*CoAuthor `protobuf:"bytes,1,rep,name=coauthors,proto3" json:"coauthors,omitempty"`
	Count     int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetCoAuthorsRes) Reset() {
	*x = GetCoAuthorsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoAuthorsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoAuthorsRes) ProtoMessage() {}

func (x *GetCoAuthorsRes) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoAuthorsRes.ProtoReflect.Descriptor instead.
func (*GetCoAuthorsRes) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetCoAuthorsRes) GetCoauthors() []*CoAuthor {
	if x != nil {
		return x.Coauthors
	}
	return nil
}

func (x *GetCoAuthorsRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeleteCoAuthorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids string `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteCoAuthorReq) Reset() {
	*x = DeleteCoAuthorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_article_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoAuthorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoAuthorReq) ProtoMessage() {}

func (x *DeleteCoAuthorReq) ProtoReflect() protoreflect.Message {
	mi := &file_article_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoAuthorReq.ProtoReflect.Descriptor instead.
func (*DeleteCoAuthorReq) Descriptor() ([]byte, []int) {
	return file_article_service_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteCoAuthorReq) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

var File_article_service_proto protoreflect.FileDescriptor

var file_article_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x02, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x53, 0x74, 0x65, 0x70, 0x22, 0xeb, 0x04, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x43, 0x0a, 0x0f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x0d, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe4, 0x05, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x43, 0x0a, 0x0f,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x0d, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a,
	0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc8, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb8, 0x03, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x53, 0x74, 0x65, 0x70, 0x22, 0xeb, 0x04, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x43, 0x0a, 0x0f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x0d, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x22, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x0b, 0x41, 0x64, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x62, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x22, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x48, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x2c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x22, 0x63,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x32, 0xcc, 0x07, 0x0a, 0x0e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x24,
	0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x60, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x22, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_article_service_proto_rawDescOnce sync.Once
	file_article_service_proto_rawDescData = file_article_service_proto_rawDesc
)

func file_article_service_proto_rawDescGZIP() []byte {
	file_article_service_proto_rawDescOnce.Do(func() {
		file_article_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_article_service_proto_rawDescData)
	})
	return file_article_service_proto_rawDescData
}

var file_article_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_article_service_proto_goTypes = []interface{}{
	(*CreateArticleReq)(nil),  // 0: submission_service.CreateArticleReq
	(*CreateArticleRes)(nil),  // 1: submission_service.CreateArticleRes
	(*GetArticleReq)(nil),     // 2: submission_service.GetArticleReq
	(*GetArticleRes)(nil),     // 3: submission_service.GetArticleRes
	(*GetArticleListReq)(nil), // 4: submission_service.GetArticleListReq
	(*GetArticleListRes)(nil), // 5: submission_service.GetArticleListRes
	(*UpdateArticleReq)(nil),  // 6: submission_service.UpdateArticleReq
	(*UpdateArticleRes)(nil),  // 7: submission_service.UpdateArticleRes
	(*DeleteArticleReq)(nil),  // 8: submission_service.DeleteArticleReq
	(*AddFilesReq)(nil),       // 9: submission_service.AddFilesReq
	(*AddFilesRes)(nil),       // 10: submission_service.AddFilesRes
	(*GetFilesReq)(nil),       // 11: submission_service.GetFilesReq
	(*GetFilesRes)(nil),       // 12: submission_service.GetFilesRes
	(*DeleteFilesReq)(nil),    // 13: submission_service.DeleteFilesReq
	(*AddCoAuthorReq)(nil),    // 14: submission_service.AddCoAuthorReq
	(*AddCoAuthorRes)(nil),    // 15: submission_service.AddCoAuthorRes
	(*GetCoAuthorsReq)(nil),   // 16: submission_service.GetCoAuthorsReq
	(*GetCoAuthorsRes)(nil),   // 17: submission_service.GetCoAuthorsRes
	(*DeleteCoAuthorReq)(nil), // 18: submission_service.DeleteCoAuthorReq
	(*Journal)(nil),           // 19: submission_service.Journal
	(*File)(nil),              // 20: submission_service.File
	(*CoAuthor)(nil),          // 21: submission_service.CoAuthor
	(*User)(nil),              // 22: submission_service.User
	(*Article)(nil),           // 23: submission_service.Article
	(*emptypb.Empty)(nil),     // 24: google.protobuf.Empty
}
var file_article_service_proto_depIdxs = []int32{
	19, // 0: submission_service.CreateArticleRes.journal_id_data:type_name -> submission_service.Journal
	20, // 1: submission_service.CreateArticleRes.files:type_name -> submission_service.File
	19, // 2: submission_service.GetArticleRes.journal_id_data:type_name -> submission_service.Journal
	20, // 3: submission_service.GetArticleRes.files:type_name -> submission_service.File
	21, // 4: submission_service.GetArticleRes.coauthors:type_name -> submission_service.CoAuthor
	22, // 5: submission_service.GetArticleRes.author_id_data:type_name -> submission_service.User
	23, // 6: submission_service.GetArticleListRes.articles:type_name -> submission_service.Article
	19, // 7: submission_service.UpdateArticleRes.journal_id_data:type_name -> submission_service.Journal
	20, // 8: submission_service.UpdateArticleRes.files:type_name -> submission_service.File
	20, // 9: submission_service.GetFilesRes.files:type_name -> submission_service.File
	21, // 10: submission_service.GetCoAuthorsRes.coauthors:type_name -> submission_service.CoAuthor
	0,  // 11: submission_service.ArticleService.CreateArticle:input_type -> submission_service.CreateArticleReq
	2,  // 12: submission_service.ArticleService.GetArticle:input_type -> submission_service.GetArticleReq
	4,  // 13: submission_service.ArticleService.GetArticleList:input_type -> submission_service.GetArticleListReq
	6,  // 14: submission_service.ArticleService.UpdateArticle:input_type -> submission_service.UpdateArticleReq
	8,  // 15: submission_service.ArticleService.DeleteArticle:input_type -> submission_service.DeleteArticleReq
	9,  // 16: submission_service.ArticleService.AddFiles:input_type -> submission_service.AddFilesReq
	11, // 17: submission_service.ArticleService.GetFiles:input_type -> submission_service.GetFilesReq
	13, // 18: submission_service.ArticleService.DeleteFiles:input_type -> submission_service.DeleteFilesReq
	14, // 19: submission_service.ArticleService.AddCoAuthor:input_type -> submission_service.AddCoAuthorReq
	16, // 20: submission_service.ArticleService.GetCoAuthors:input_type -> submission_service.GetCoAuthorsReq
	18, // 21: submission_service.ArticleService.DeleteCoAuthor:input_type -> submission_service.DeleteCoAuthorReq
	1,  // 22: submission_service.ArticleService.CreateArticle:output_type -> submission_service.CreateArticleRes
	3,  // 23: submission_service.ArticleService.GetArticle:output_type -> submission_service.GetArticleRes
	5,  // 24: submission_service.ArticleService.GetArticleList:output_type -> submission_service.GetArticleListRes
	7,  // 25: submission_service.ArticleService.UpdateArticle:output_type -> submission_service.UpdateArticleRes
	24, // 26: submission_service.ArticleService.DeleteArticle:output_type -> google.protobuf.Empty
	10, // 27: submission_service.ArticleService.AddFiles:output_type -> submission_service.AddFilesRes
	12, // 28: submission_service.ArticleService.GetFiles:output_type -> submission_service.GetFilesRes
	24, // 29: submission_service.ArticleService.DeleteFiles:output_type -> google.protobuf.Empty
	15, // 30: submission_service.ArticleService.AddCoAuthor:output_type -> submission_service.AddCoAuthorRes
	17, // 31: submission_service.ArticleService.GetCoAuthors:output_type -> submission_service.GetCoAuthorsRes
	24, // 32: submission_service.ArticleService.DeleteCoAuthor:output_type -> google.protobuf.Empty
	22, // [22:33] is the sub-list for method output_type
	11, // [11:22] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_article_service_proto_init() }
func file_article_service_proto_init() {
	if File_article_service_proto != nil {
		return
	}
	file_submission_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_article_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArticleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArticleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArticleListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArticleListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateArticleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFilesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCoAuthorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCoAuthorRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoAuthorsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoAuthorsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_article_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoAuthorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_article_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_article_service_proto_goTypes,
		DependencyIndexes: file_article_service_proto_depIdxs,
		MessageInfos:      file_article_service_proto_msgTypes,
	}.Build()
	File_article_service_proto = out.File
	file_article_service_proto_rawDesc = nil
	file_article_service_proto_goTypes = nil
	file_article_service_proto_depIdxs = nil
}
