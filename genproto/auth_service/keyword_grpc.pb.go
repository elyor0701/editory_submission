// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: keyword.proto

package auth_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeywordService_CreateKeyword_FullMethodName  = "/auth_service.KeywordService/CreateKeyword"
	KeywordService_GetKeyword_FullMethodName     = "/auth_service.KeywordService/GetKeyword"
	KeywordService_GetKeywordList_FullMethodName = "/auth_service.KeywordService/GetKeywordList"
	KeywordService_UpdateKeyword_FullMethodName  = "/auth_service.KeywordService/UpdateKeyword"
	KeywordService_DeleteKeyword_FullMethodName  = "/auth_service.KeywordService/DeleteKeyword"
)

// KeywordServiceClient is the client API for KeywordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeywordServiceClient interface {
	CreateKeyword(ctx context.Context, in *CreateKeywordReq, opts ...grpc.CallOption) (*CreateKeywordRes, error)
	GetKeyword(ctx context.Context, in *GetKeywordReq, opts ...grpc.CallOption) (*GetKeywordRes, error)
	GetKeywordList(ctx context.Context, in *GetKeywordListReq, opts ...grpc.CallOption) (*GetKeywordListRes, error)
	UpdateKeyword(ctx context.Context, in *UpdateKeywordReq, opts ...grpc.CallOption) (*UpdateKeywordRes, error)
	DeleteKeyword(ctx context.Context, in *DeleteKeywordReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type keywordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeywordServiceClient(cc grpc.ClientConnInterface) KeywordServiceClient {
	return &keywordServiceClient{cc}
}

func (c *keywordServiceClient) CreateKeyword(ctx context.Context, in *CreateKeywordReq, opts ...grpc.CallOption) (*CreateKeywordRes, error) {
	out := new(CreateKeywordRes)
	err := c.cc.Invoke(ctx, KeywordService_CreateKeyword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keywordServiceClient) GetKeyword(ctx context.Context, in *GetKeywordReq, opts ...grpc.CallOption) (*GetKeywordRes, error) {
	out := new(GetKeywordRes)
	err := c.cc.Invoke(ctx, KeywordService_GetKeyword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keywordServiceClient) GetKeywordList(ctx context.Context, in *GetKeywordListReq, opts ...grpc.CallOption) (*GetKeywordListRes, error) {
	out := new(GetKeywordListRes)
	err := c.cc.Invoke(ctx, KeywordService_GetKeywordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keywordServiceClient) UpdateKeyword(ctx context.Context, in *UpdateKeywordReq, opts ...grpc.CallOption) (*UpdateKeywordRes, error) {
	out := new(UpdateKeywordRes)
	err := c.cc.Invoke(ctx, KeywordService_UpdateKeyword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keywordServiceClient) DeleteKeyword(ctx context.Context, in *DeleteKeywordReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KeywordService_DeleteKeyword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeywordServiceServer is the server API for KeywordService service.
// All implementations must embed UnimplementedKeywordServiceServer
// for forward compatibility
type KeywordServiceServer interface {
	CreateKeyword(context.Context, *CreateKeywordReq) (*CreateKeywordRes, error)
	GetKeyword(context.Context, *GetKeywordReq) (*GetKeywordRes, error)
	GetKeywordList(context.Context, *GetKeywordListReq) (*GetKeywordListRes, error)
	UpdateKeyword(context.Context, *UpdateKeywordReq) (*UpdateKeywordRes, error)
	DeleteKeyword(context.Context, *DeleteKeywordReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedKeywordServiceServer()
}

// UnimplementedKeywordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeywordServiceServer struct {
}

func (UnimplementedKeywordServiceServer) CreateKeyword(context.Context, *CreateKeywordReq) (*CreateKeywordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyword not implemented")
}
func (UnimplementedKeywordServiceServer) GetKeyword(context.Context, *GetKeywordReq) (*GetKeywordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyword not implemented")
}
func (UnimplementedKeywordServiceServer) GetKeywordList(context.Context, *GetKeywordListReq) (*GetKeywordListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeywordList not implemented")
}
func (UnimplementedKeywordServiceServer) UpdateKeyword(context.Context, *UpdateKeywordReq) (*UpdateKeywordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyword not implemented")
}
func (UnimplementedKeywordServiceServer) DeleteKeyword(context.Context, *DeleteKeywordReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyword not implemented")
}
func (UnimplementedKeywordServiceServer) mustEmbedUnimplementedKeywordServiceServer() {}

// UnsafeKeywordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeywordServiceServer will
// result in compilation errors.
type UnsafeKeywordServiceServer interface {
	mustEmbedUnimplementedKeywordServiceServer()
}

func RegisterKeywordServiceServer(s grpc.ServiceRegistrar, srv KeywordServiceServer) {
	s.RegisterService(&KeywordService_ServiceDesc, srv)
}

func _KeywordService_CreateKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeywordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordServiceServer).CreateKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeywordService_CreateKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordServiceServer).CreateKeyword(ctx, req.(*CreateKeywordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeywordService_GetKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeywordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordServiceServer).GetKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeywordService_GetKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordServiceServer).GetKeyword(ctx, req.(*GetKeywordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeywordService_GetKeywordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeywordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordServiceServer).GetKeywordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeywordService_GetKeywordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordServiceServer).GetKeywordList(ctx, req.(*GetKeywordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeywordService_UpdateKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeywordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordServiceServer).UpdateKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeywordService_UpdateKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordServiceServer).UpdateKeyword(ctx, req.(*UpdateKeywordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeywordService_DeleteKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeywordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordServiceServer).DeleteKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeywordService_DeleteKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordServiceServer).DeleteKeyword(ctx, req.(*DeleteKeywordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// KeywordService_ServiceDesc is the grpc.ServiceDesc for KeywordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeywordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_service.KeywordService",
	HandlerType: (*KeywordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKeyword",
			Handler:    _KeywordService_CreateKeyword_Handler,
		},
		{
			MethodName: "GetKeyword",
			Handler:    _KeywordService_GetKeyword_Handler,
		},
		{
			MethodName: "GetKeywordList",
			Handler:    _KeywordService_GetKeywordList_Handler,
		},
		{
			MethodName: "UpdateKeyword",
			Handler:    _KeywordService_UpdateKeyword_Handler,
		},
		{
			MethodName: "DeleteKeyword",
			Handler:    _KeywordService_DeleteKeyword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keyword.proto",
}
