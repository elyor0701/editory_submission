// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: email_template.proto

package notification_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmailTmpService_CreateEmailTmp_FullMethodName  = "/notification_service.EmailTmpService/CreateEmailTmp"
	EmailTmpService_GetEmailTmp_FullMethodName     = "/notification_service.EmailTmpService/GetEmailTmp"
	EmailTmpService_GetEmailTmpList_FullMethodName = "/notification_service.EmailTmpService/GetEmailTmpList"
	EmailTmpService_UpdateEmailTmp_FullMethodName  = "/notification_service.EmailTmpService/UpdateEmailTmp"
	EmailTmpService_DeleteEmailTmp_FullMethodName  = "/notification_service.EmailTmpService/DeleteEmailTmp"
)

// EmailTmpServiceClient is the client API for EmailTmpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailTmpServiceClient interface {
	CreateEmailTmp(ctx context.Context, in *CreateEmailTmpReq, opts ...grpc.CallOption) (*CreateEmailTmpRes, error)
	GetEmailTmp(ctx context.Context, in *GetEmailTmpReq, opts ...grpc.CallOption) (*GetEmailTmpRes, error)
	GetEmailTmpList(ctx context.Context, in *GetEmailTmpListReq, opts ...grpc.CallOption) (*GetEmailTmpListRes, error)
	UpdateEmailTmp(ctx context.Context, in *UpdateEmailTmpReq, opts ...grpc.CallOption) (*UpdateEmailTmpRes, error)
	DeleteEmailTmp(ctx context.Context, in *DeleteEmailTmpReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type emailTmpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailTmpServiceClient(cc grpc.ClientConnInterface) EmailTmpServiceClient {
	return &emailTmpServiceClient{cc}
}

func (c *emailTmpServiceClient) CreateEmailTmp(ctx context.Context, in *CreateEmailTmpReq, opts ...grpc.CallOption) (*CreateEmailTmpRes, error) {
	out := new(CreateEmailTmpRes)
	err := c.cc.Invoke(ctx, EmailTmpService_CreateEmailTmp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailTmpServiceClient) GetEmailTmp(ctx context.Context, in *GetEmailTmpReq, opts ...grpc.CallOption) (*GetEmailTmpRes, error) {
	out := new(GetEmailTmpRes)
	err := c.cc.Invoke(ctx, EmailTmpService_GetEmailTmp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailTmpServiceClient) GetEmailTmpList(ctx context.Context, in *GetEmailTmpListReq, opts ...grpc.CallOption) (*GetEmailTmpListRes, error) {
	out := new(GetEmailTmpListRes)
	err := c.cc.Invoke(ctx, EmailTmpService_GetEmailTmpList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailTmpServiceClient) UpdateEmailTmp(ctx context.Context, in *UpdateEmailTmpReq, opts ...grpc.CallOption) (*UpdateEmailTmpRes, error) {
	out := new(UpdateEmailTmpRes)
	err := c.cc.Invoke(ctx, EmailTmpService_UpdateEmailTmp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailTmpServiceClient) DeleteEmailTmp(ctx context.Context, in *DeleteEmailTmpReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EmailTmpService_DeleteEmailTmp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailTmpServiceServer is the server API for EmailTmpService service.
// All implementations must embed UnimplementedEmailTmpServiceServer
// for forward compatibility
type EmailTmpServiceServer interface {
	CreateEmailTmp(context.Context, *CreateEmailTmpReq) (*CreateEmailTmpRes, error)
	GetEmailTmp(context.Context, *GetEmailTmpReq) (*GetEmailTmpRes, error)
	GetEmailTmpList(context.Context, *GetEmailTmpListReq) (*GetEmailTmpListRes, error)
	UpdateEmailTmp(context.Context, *UpdateEmailTmpReq) (*UpdateEmailTmpRes, error)
	DeleteEmailTmp(context.Context, *DeleteEmailTmpReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedEmailTmpServiceServer()
}

// UnimplementedEmailTmpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailTmpServiceServer struct {
}

func (UnimplementedEmailTmpServiceServer) CreateEmailTmp(context.Context, *CreateEmailTmpReq) (*CreateEmailTmpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailTmp not implemented")
}
func (UnimplementedEmailTmpServiceServer) GetEmailTmp(context.Context, *GetEmailTmpReq) (*GetEmailTmpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTmp not implemented")
}
func (UnimplementedEmailTmpServiceServer) GetEmailTmpList(context.Context, *GetEmailTmpListReq) (*GetEmailTmpListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTmpList not implemented")
}
func (UnimplementedEmailTmpServiceServer) UpdateEmailTmp(context.Context, *UpdateEmailTmpReq) (*UpdateEmailTmpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailTmp not implemented")
}
func (UnimplementedEmailTmpServiceServer) DeleteEmailTmp(context.Context, *DeleteEmailTmpReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailTmp not implemented")
}
func (UnimplementedEmailTmpServiceServer) mustEmbedUnimplementedEmailTmpServiceServer() {}

// UnsafeEmailTmpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailTmpServiceServer will
// result in compilation errors.
type UnsafeEmailTmpServiceServer interface {
	mustEmbedUnimplementedEmailTmpServiceServer()
}

func RegisterEmailTmpServiceServer(s grpc.ServiceRegistrar, srv EmailTmpServiceServer) {
	s.RegisterService(&EmailTmpService_ServiceDesc, srv)
}

func _EmailTmpService_CreateEmailTmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailTmpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailTmpServiceServer).CreateEmailTmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailTmpService_CreateEmailTmp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailTmpServiceServer).CreateEmailTmp(ctx, req.(*CreateEmailTmpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailTmpService_GetEmailTmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailTmpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailTmpServiceServer).GetEmailTmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailTmpService_GetEmailTmp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailTmpServiceServer).GetEmailTmp(ctx, req.(*GetEmailTmpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailTmpService_GetEmailTmpList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailTmpListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailTmpServiceServer).GetEmailTmpList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailTmpService_GetEmailTmpList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailTmpServiceServer).GetEmailTmpList(ctx, req.(*GetEmailTmpListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailTmpService_UpdateEmailTmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailTmpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailTmpServiceServer).UpdateEmailTmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailTmpService_UpdateEmailTmp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailTmpServiceServer).UpdateEmailTmp(ctx, req.(*UpdateEmailTmpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailTmpService_DeleteEmailTmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailTmpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailTmpServiceServer).DeleteEmailTmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailTmpService_DeleteEmailTmp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailTmpServiceServer).DeleteEmailTmp(ctx, req.(*DeleteEmailTmpReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailTmpService_ServiceDesc is the grpc.ServiceDesc for EmailTmpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailTmpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification_service.EmailTmpService",
	HandlerType: (*EmailTmpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmailTmp",
			Handler:    _EmailTmpService_CreateEmailTmp_Handler,
		},
		{
			MethodName: "GetEmailTmp",
			Handler:    _EmailTmpService_GetEmailTmp_Handler,
		},
		{
			MethodName: "GetEmailTmpList",
			Handler:    _EmailTmpService_GetEmailTmpList_Handler,
		},
		{
			MethodName: "UpdateEmailTmp",
			Handler:    _EmailTmpService_UpdateEmailTmp_Handler,
		},
		{
			MethodName: "DeleteEmailTmp",
			Handler:    _EmailTmpService_DeleteEmailTmp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "email_template.proto",
}
